import { Box, Button, Typography } from "@mui/material";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import { useCSVReader } from "react-papaparse";
import { LineChart, Line, CartesianGrid, XAxis, YAxis } from "recharts";
import { DataGrid, GridActionsCellItem } from "@mui/x-data-grid";
import DeleteIcon from "@mui/icons-material/Delete";

function random_rgba() {
  var o = Math.round,
    r = Math.random,
    s = 255;
  return (
    "rgba(" +
    o(r() * s) +
    "," +
    o(r() * s) +
    "," +
    o(r() * s) +
    "," +
    r().toFixed(1) +
    ")"
  );
}

export default function Home() {
  const [plotData, setPlotData] = useState([]);
  const [numPlots, updateNumPlots] = useState(1);
  const [plots, updatePlots] = useState([]);
  const { CSVReader } = useCSVReader();

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Gabe charts</h1>

        <Box>
          <CSVReader
            onUploadAccepted={(results) => {
              console.log("---------------------------");
              console.log(results);
              console.log("---------------------------");
              const newPlotData = [...plotData];
              for (const row of results.data) {
                // If plotData has a row with the same x value, add this y value
                // to the existing row, otherwise add a new row
                const existingRow = newPlotData.find((r) => r.x === row[0]);
                if (existingRow) {
                  existingRow["y" + numPlots] = row[1];
                } else {
                  newPlotData.push({ x: row[0], ["y" + numPlots]: row[1] });
                }
                setPlotData(newPlotData);
                updatePlots([
                  ...plots,
                  {
                    id: numPlots,
                    name: "Plot " + numPlots,
                  },
                ]);
                updateNumPlots(numPlots + 1);
              }
            }}
          >
            {({
              getRootProps,
              acceptedFile,
              ProgressBar,
              getRemoveFileProps,
            }) => (
              <>
                <Button
                  variant="contained"
                  component="label"
                  {...getRootProps()}
                >
                  Upload File
                </Button>
              </>
            )}
          </CSVReader>
          <Box
            sx={{
              color: "black",
              width: "90%",
              backgroundColor: "white",
              height: "200px",
            }}
          >
            <DataGrid
              rows={plots}
              columns={[
                { field: "name", headerName: "Name", width: 100 },
                {
                  field: "actions",
                  type: "actions",
                  getActions: (params) => [
                    <GridActionsCellItem
                      icon={<DeleteIcon />}
                      onClick={() => {
                        const newPlotData = [...plotData];
                        for (const row of newPlotData) {
                          delete row["y" + params.id];
                        }
                        setPlotData(newPlotData);
                        updatePlots(plots.filter((p) => p.id !== params.id));
                      }}
                      label="Delete"
                      key={params.id}
                    />,
                  ],
                },
              ]}
            />
          </Box>
          {numPlots > 1 && (
            <LineChart width={800} height={500} data={plotData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="x" />
              <YAxis />
              {Array.from(Array(numPlots).keys()).map((i) => (
                <Line
                  type="monotone"
                  dataKey={"y" + i}
                  activeDot={{ r: 8 }}
                  stroke={random_rgba()}
                  key={i}
                />
              ))}
            </LineChart>
          )}
        </Box>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
